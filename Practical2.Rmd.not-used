
```{r 'check_ps', include=FALSE}

user.name = ''
```


<img src=https://images.unsplash.com/photo-1593594820228-a05cc04bc433?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80  width=400 height=200 style="float:right">

## Exercise 2 -- Duck nest analysis

This has been your first experience using the `Distance` package.  There are only a handful of functions you need to successfully complete a distance sampling analysis.  This practical gave you experience with these functions.  The data are familiar to you because they the same data you used when trying to fit a detection function by hand in Exercise 1.  This exercise lets the computer do the work.  Compare the estimate of duck nest density produced by `Distance` with the estimate you manually produced.

You should have already executed code as described in Practical 2.  I have duplicated some of the code and output here to reduce your need to switch between this tutorial and your previous work.

```{r eval=FALSE}
# Run for additional info in the Viewer pane
info("preknit_MnxONPgkMTmK")
```



Quiz: For the half normal detection function, what was the estimated value of $\hat{P}_a$?

[1]: 0.869
[2]: 0.039
[3]: 614.25
[4]: 0.933

```{r eval=FALSE}
# Run line to answer the quiz above
answer.quiz("Pa")
```


Quiz: Now that you have an estimate of $\hat{P}_a$, what does it mean?

[1]: distance to which nests were detected
[2]: area under the curve
[3]: proportion of nests detected out to 2.4m
[4]: number of iterations needed to estimate detection function parameters

```{r eval=FALSE}
# Run line to answer the quiz above
answer.quiz("Pa-defn")
```

### Density estimate to abundance estimate

a) The field `area` was set to 0 in the `ducknest` data frame; however the practical description notes that the refuge is 47.7 km^2 in size.  Use the code block below to compute the number of duck nests on the refuge based upon your estimate of $\hat{D}$.

```{r "1_a"}
dhat <- ___
area <- ___
est.num.nests <- ___
print(est.num.nests)
```


### Assessing model fit

b) Although we have not yet discussed how to assess fit of our models to data, Practical 2 did introduce you to the function `gof_ds`.  In the code chunk below, apply this goodness of fit function to the half normal detection function fitted to the duck nest data and interpret the results.

```{r eval=FALSE}
# Run for additional info in the Viewer pane
info("preknit_vCzcdJeNlxDp")
```


Quiz: How should the plot be interpreted? (select two correct answers)

[1]: departures from good fit are indicated by departures from the underlying 45° line
[2]: model that fits has all points near the 45° line
[3]: this plot has nothing to do with model fit
[4]: a rapid rise in the graphed points implies good model fit

```{r eval=FALSE}
# Run line to answer the quiz above
answer.quiz("QQintperpret")
```


Quiz: The numerical output from `gof_ds` is from the Cramer-von Mises test.   Interpret the output.

[1]: P-value is <1, therefore the model fit is poor
[2]: The test statistic is smaller than the P-value, therefore the fit is adequate
[3]: The test statistic is close to 0, therefore the fit is poor
[4]: P-value is close to one, indicating that there’s no reason to suspect the fit is inadequate

```{r eval=FALSE}
# Run line to answer the quiz above
answer.quiz("GOF")
```

### Difference in density estimates from different models

```{r eval=FALSE}
# Run for additional info in the Viewer pane
info("preknit_YFyPsnCgyYoN")
```

c) The preceding code fit all three key function models to the duck nest data.  To reinforce the idea that similar results are produced *(for good data)* from the different key functions, write a few lines of code to explore this.  Value entered to one decimal place.
- find key function model that produces the lowest density estimate and assign to `nest.hr.herm`
- find the key function model that produces the largest density estimate and assign to `nest.uf.cos`
- compute the difference between these estimates (`d.diff`) and
- relativise by dividing by the smaller density estimate `rel.diff`

```{r "1_c"}
nest.hr.herm <- ___
nest.uf.cos <- ___
d.diff <- nest.uf.cos - nest.hr.herm
rel.diff <- d.diff / nest.hr.herm
print(rel.diff)
```


Quiz: To the nearest **percent**, what is the relative difference between the largest and smallest density estimate you just computed?

Answer: 

```{r eval=FALSE}
# Run line to answer the quiz above
answer.quiz("pctdiff")
```
